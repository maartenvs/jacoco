/*******************************************************************************
 * Copyright (c) 2009, 2017 Mountainminds GmbH & Co. KG and Contributors
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Evgeny Mandrikov - initial API and implementation
 *
 *******************************************************************************/
package org.jacoco.core.internal.analysis.filter;

import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.LabelNode;
import org.objectweb.asm.tree.LookupSwitchInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.tree.TableSwitchInsnNode;

/**
 * Filters code that is generated by javac for a switch statement with a String.
 */
public final class StringSwitchFilter implements IFilter {

	public void filter(final String className, final String superClassName,
			final MethodNode methodNode, final IFilterOutput output) {
		AbstractInsnNode i = methodNode.instructions.getFirst();
		while (i != null) {
			filter(i, output);
			i = i.getNext();
		}
	}

	/**
	 * javac generates two switches. First one by {@link String#hashCode()}.
	 * Number of cases in the second switch is equal to number of cases in
	 * source code, so it is enough to completely filter-out first switch.
	 * Handler for default case of the first switch - is the second switch.
	 */
	private void filter(final AbstractInsnNode start,
			final IFilterOutput output) {
		final LabelNode dflt;
		if (start.getOpcode() == Opcodes.LOOKUPSWITCH) {
			dflt = ((LookupSwitchInsnNode) start).dflt;
		} else if (start.getOpcode() == Opcodes.TABLESWITCH) {
			dflt = ((TableSwitchInsnNode) start).dflt;
		} else {
			return;
		}
		final AbstractInsnNode previous = start.getPrevious();
		if (previous.getOpcode() != Opcodes.INVOKEVIRTUAL) {
			return;
		}
		final MethodInsnNode m = ((MethodInsnNode) previous);
		if (!"java/lang/String".equals(m.owner) || !"hashCode".equals(m.name)) {
			return;
		}

		AbstractInsnNode i = start;
		do {
			if (i.getOpcode() == Opcodes.IFNE) {
				// ECJ
				return;
			}
			i = i.getNext();
		} while (i != dflt);

		output.ignore(start, dflt);
	}

}
